const { Server } = require('socket.io');
const { processMessage, getConversationHistory } = require('./AI_Service');

let io;

const setupWebSocket = (server) => {
  // Create Socket.IO instance with CORS config
  io = new Server(server, {
    cors: {
      origin: process.env.NODE_ENV === 'production' ? false : '*',
      methods: ['GET', 'POST']
    }
  });
  
  // Connection handler
  io.on('connection', (socket) => {
    console.log('New client connected:', socket.id);
    
    // Authenticate connection
    socket.on('authenticate', async (data) => {
      try {
        const { userId, token } = data;
        console.log('Authentication attempt:', { userId: Boolean(userId), tokenExists: Boolean(token) });
    
    // Verify session
    if (!userId || !isValidSession(token)) {
      console.log('Authentication failed. Reasons:', {
        noUserId: !userId,
        invalidToken: !isValidSession(token)
      });
      socket.emit('error', { message: 'Authentication failed' });
      return;
      } catch (error) {
        console.error('Authentication error:', error);
        socket.emit('error', { message: 'Authentication failed' });
      }
    }
    });
  
  
  
    
    // Message handler
    socket.on('message', async (data) => {
      try {
        // Ensure user is authenticated
        if (!socket.data.userId) {
          socket.emit('error', { message: 'Not authenticated' });
          return;
        }
        
        const { text } = data;
        const userId = socket.data.userId;
        
        // Send typing indicator
        socket.emit('typing', { isTyping: true });
        
        // Process the message
        const aiResponse = await processMessage(userId, text);
        
        // Small delay to simulate thinking
        setTimeout(() => {
          // Stop typing indicator
          socket.emit('typing', { isTyping: false });
          
          // Send response
          socket.emit('message', {
            id: Date.now(),
            text: aiResponse.text,
            isAi: true,
            source: aiResponse.source,
            timestamp: new Date()
          });
        }, 1000);
      } catch (error) {
        console.error('Message processing error:', error);
        socket.emit('error', { message: 'Failed to process message' });
      }
    });
    
    // Disconnect handler
    socket.on('disconnect', () => {
      console.log('Client disconnected:', socket.id);
    });
  });
  
  return io;
};

// Simple session validation helper
const isValidSession = (token) => {
  // In a real implementation, this would verify against your session store
  // For now, we'll accept any non-empty token
  //return !!token;
  console.log('Validating token:', token ? token.substring(0, 10) + '...' : 'undefined');
  return true; 
};

// Get Socket.IO instance
const getIO = () => {
  if (!io) {
    throw new Error('Socket.IO not initialized');
  }
  return io;
};

module.exports = {
  setupWebSocket,
  getIO
};
